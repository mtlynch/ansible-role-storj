---
- name: create storj group
  group:
    name: "{{ storj_group }}"
    state: present

- name: create storj user
  user:
    name: "{{ storj_user }}"
    group: "{{ storj_group }}"
    system: yes

- name: install dependencies
  apt:
    name: "{{ item }}"
    state: installed
  with_items:
    - git
    - python
    - build-essential

- name: install storjshare
  npm:
    name: storjshare-daemon
    version: "{{ storj_daemon_version }}"
    state: present
    global: yes

- name: create storj directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ storj_user }}"
    group: "{{ storj_group }}"
    mode: 0755
  with_items:
    - "{{ storj_dir }}"
    - "{{ storj_farmer_share_dir }}"
    - "{{ storj_logs_dir }}"

- name: ensure storjshare daemon is running
  command: storjshare daemon
  become: true
  become_user: "{{ storj_user }}"
  register: daemon_result
  changed_when: "'* starting daemon' in daemon_result.stdout"
  failed_when: "'failed' in daemon_result.stderr"

- name: check for existing storjshare config
  stat:
    path: "{{ storj_config_path }}"
  register: config_path

- name: create storjshare config
  command: |
    storjshare create \
      --storj "{{ storj_payment_address }}" \
      --storage "{{ storj_farmer_share_dir }}" \
      --size "{{ storj_farmer_share_size }}" \
      --rpcaddress "{{ storj_daemon_rpc_address }}" \
      --rpcport "{{ storj_daemon_rpc_port }}" \
      --logdir "{{ storj_logs_dir }}" \
      --verbosity "{{ storj_daemon_log_verbosity }}" \
      --outfile "{{ storj_config_path }}" \
      --noedit
  become: true
  become_user: "{{ storj_user }}"
  register: create_config_result
  when: not config_path.stat.exists
  changed_when: "'skipped' not in create_config_result.stdout"
  failed_when: "(create_config_result.stderr is defined) and ('failed' in create_config_result.stderr)"

- name: start storjshare
  command: "storjshare start --config {{ storj_config_path }}"
  become: true
  become_user: "{{ storj_user }}"
  register: storjshare_result
  changed_when: False
  failed_when: "'failed' in storjshare_result.stderr"
